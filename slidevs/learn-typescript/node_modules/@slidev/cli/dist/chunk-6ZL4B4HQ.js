"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkMJQETB73js = require('./chunk-MJQETB73.js');

// node/utils.ts
var _path = require('path');
var _utils = require('@antfu/utils');
var _isinstalledglobally = require('is-installed-globally'); var _isinstalledglobally2 = _interopRequireDefault(_isinstalledglobally);
var _resolve = require('resolve');
var _globaldirs = require('global-dirs'); var _globaldirs2 = _interopRequireDefault(_globaldirs);
function toAtFS(path) {
  return `/@fs${_utils.ensurePrefix.call(void 0, "/", _utils.slash.call(void 0, path))}`;
}
function resolveImportPath(importName, ensure = false) {
  try {
    return _resolve.sync.call(void 0, importName, {
      preserveSymlinks: false
    });
  } catch (e) {
  }
  if (_isinstalledglobally2.default) {
    try {
      return _chunkMJQETB73js.__require.resolve(_path.join.call(void 0, _globaldirs2.default.yarn.packages, importName));
    } catch (e2) {
    }
    try {
      return _chunkMJQETB73js.__require.resolve(_path.join.call(void 0, _globaldirs2.default.npm.packages, importName));
    } catch (e3) {
    }
  }
  if (ensure)
    throw new Error(`Failed to resolve package "${importName}"`);
  return void 0;
}
function resolveGlobalImportPath(importName) {
  try {
    return _resolve.sync.call(void 0, importName, { preserveSymlinks: false, basedir: __dirname });
  } catch (e4) {
  }
  try {
    return _chunkMJQETB73js.__require.resolve(_path.join.call(void 0, _globaldirs2.default.yarn.packages, importName));
  } catch (e5) {
  }
  try {
    return _chunkMJQETB73js.__require.resolve(_path.join.call(void 0, _globaldirs2.default.npm.packages, importName));
  } catch (e6) {
  }
  throw new Error(`Failed to resolve global package "${importName}"`);
}
function stringifyMarkdownTokens(tokens) {
  return tokens.map(
    (token) => {
      var _a;
      return (_a = token.children) == null ? void 0 : _a.filter((t) => ["text", "code_inline"].includes(t.type) && !t.content.match(/^\s*$/)).map((t) => t.content.trim()).join(" ");
    }
  ).filter(Boolean).join(" ");
}
function generateGoogleFontsUrl(options) {
  const weights = options.weights.flatMap((i) => options.italic ? [`0,${i}`, `1,${i}`] : [`${i}`]).sort().join(";");
  const fonts = options.webfonts.map((i) => `family=${i.replace(/^(['"])(.*)\1$/, "$1").replace(/\s+/g, "+")}:${options.italic ? "ital," : ""}wght@${weights}`).join("&");
  return `https://fonts.googleapis.com/css2?${fonts}&display=swap`;
}
function packageExists(name) {
  if (resolveImportPath(`${name}/package.json`))
    return true;
  return false;
}








exports.toAtFS = toAtFS; exports.resolveImportPath = resolveImportPath; exports.resolveGlobalImportPath = resolveGlobalImportPath; exports.stringifyMarkdownTokens = stringifyMarkdownTokens; exports.generateGoogleFontsUrl = generateGoogleFontsUrl; exports.packageExists = packageExists;
