import {
  loadSetups
} from "./chunk-6XVZLT3I.mjs";
import "./chunk-L5QH2WZE.mjs";

// node/plugins/unocss.ts
import { resolve } from "path";
import { existsSync } from "fs";
import { uniq } from "@antfu/utils";
import { mergeConfigs } from "unocss";
import jiti from "jiti";
import UnoCSS from "unocss/vite";
async function createUnocssPlugin({ themeRoots, addonRoots, clientRoot, roots, userRoot, data }, { unocss: unoOptions = {} }) {
  var _a, _b, _c, _d;
  const configFiles = uniq([
    resolve(userRoot, "uno.config.ts"),
    resolve(userRoot, "unocss.config.ts"),
    ...themeRoots.map((i) => `${i}/uno.config.ts`),
    ...themeRoots.map((i) => `${i}/unocss.config.ts`),
    ...addonRoots.map((i) => `${i}/uno.config.ts`),
    ...addonRoots.map((i) => `${i}/unocss.config.ts`),
    resolve(clientRoot, "uno.config.ts"),
    resolve(clientRoot, "unocss.config.ts")
  ]).filter((i) => existsSync(i));
  const configs = configFiles.map((i) => {
    const loaded = jiti(__filename)(i);
    const config2 = "default" in loaded ? loaded.default : loaded;
    return config2;
  }).filter(Boolean);
  configs.reverse();
  let config = mergeConfigs([...configs, unoOptions]);
  config = await loadSetups(roots, "unocss.ts", {}, config, true);
  config.theme || (config.theme = {});
  (_a = config.theme).fontFamily || (_a.fontFamily = {});
  (_b = config.theme.fontFamily).sans || (_b.sans = data.config.fonts.sans.join(","));
  (_c = config.theme.fontFamily).mono || (_c.mono = data.config.fonts.mono.join(","));
  (_d = config.theme.fontFamily).serif || (_d.serif = data.config.fonts.serif.join(","));
  return UnoCSS({
    configFile: false,
    configDeps: configFiles,
    ...config
  });
}
export {
  createUnocssPlugin
};
