import{o,c as n,k as i,e,ac as t,q as u,s as c,B as l}from"./modules/vue-DbxlR5i2.js";import{I as m}from"./slidev/default-BvtlqFyG.js";import{u as p,f as d}from"./slidev/context-B0SpK287.js";import"./index-16D_NgiB.js";import"./modules/shiki-bCin5VMP.js";const j={__name:"01introduction.md__slidev_3",setup(b){const{$slidev:v,$nav:f,$clicksContext:s,$clicks:_,$page:x,$renderContext:O,$frontmatter:a}=p();return s.setup(),(S,r)=>(o(),n(m,u(c(l(d)(l(a),2))),{default:i(()=>r[0]||(r[0]=[e("h2",null,"Introduction",-1),e("p",null,[t("RxJS 是一个使用可观察序列编写异步和基于事件的程序的库。它提供了一种核心类型，即 Observable,satellite类型（Observer, Schedulers, Subjects）,还有受array方法启发的操作符(map,filter,reduce,every等以允许将异步事件作为集合处理。)"),e("br"),t(" RxJs中有以下基本概念")],-1),e("ul",null,[e("li",null,"Observable：代表未来值或事件的可调用集合(观测值)。"),e("li",null,"Observer：是一个回调集合，它知道如何监听 Observable 传递的值（观察者）。"),e("li",null,"Subscription：订阅代表 Observable 的执行，主要用于取消执行。"),e("li",null,"Operators： 操作符是纯函数，支持使用函数式编程风格处理集合，例如 map 、 filter 、 concat 、 reduce"),e("li",null,"Subject： 相当于EventEmitter，是向多个Observers多播一个值或事件的唯一方式。"),e("li",null,"Schedulers： 是控制并发的集中调度程序，允许我们在计算过程发生时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。")],-1)])),_:1},16))}};export{j as default};
