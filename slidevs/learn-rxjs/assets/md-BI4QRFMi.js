import{o as a,c as o,k as s,e as l,ac as t,q as d,s as c,B as n}from"./modules/vue-DbxlR5i2.js";import{I as i}from"./slidev/default-BvtlqFyG.js";import{u as m,f as p}from"./slidev/context-B0SpK287.js";import"./index-16D_NgiB.js";import"./modules/shiki-bCin5VMP.js";const g={__name:"08Scheduler.md__slidev_43",setup(h){const{$slidev:f,$nav:S,$clicksContext:r,$clicks:_,$page:x,$renderContext:$,$frontmatter:u}=m();return r.setup(),(k,e)=>(a(),o(i,d(c(n(p)(n(u),42))),{default:s(()=>e[0]||(e[0]=[l("h3",null,"Scheduler的类型",-1),l("p",null,"async 是RxJS提供的内置Scheduler之一。",-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,[l("strong",null,"Scheduler")]),l("th",null,"目的")])]),l("tbody",null,[l("tr",null,[l("td",null,"null"),l("td",null,"通过不传递任何调度程序，通知将同步且递归地传递。将此用于恒定时间运算或尾递归运算。")]),l("tr",null,[l("td",null,"queueScheduler"),l("td",null,"在当前事件框架中的队列上进行调度。使用它进行迭代操作。")]),l("tr",null,[l("td",null,"asapScheduler"),l("td",null,"在微任务队列上进行调度，该队列与用于 Promise 的队列相同。基本上是在当前工作之后，但在下一份工作之前。使用它进行异步转换。")]),l("tr",null,[l("td",null,"asyncScheduler"),l("td",null,[t("与 "),l("code",null,"setInterval"),t(" 一起工作。将其用于基于时间的操作。")])]),l("tr",null,[l("td",null,"animationFrameScheduler"),l("td",null,"安排在下一次浏览器内容重绘之前发生的任务。可用于创建流畅的浏览器动画。")])])],-1)])),_:1},16))}};export{g as default};
