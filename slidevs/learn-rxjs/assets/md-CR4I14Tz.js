import{_ as o}from"./slidev/CodeBlockWrapper.vue_vue_type_script_setup_true_lang-CM1IqKGi.js";import{o as n,c as p,k as i,e as s,l as k,m as d,q as m,s as u,B as l}from"./modules/vue-DbxlR5i2.js";import{I as f}from"./slidev/default-BvtlqFyG.js";import{u as h,f as g}from"./slidev/context-B0SpK287.js";import"./modules/unplugin-icons-Du48KXpc.js";import"./index-16D_NgiB.js";import"./modules/shiki-bCin5VMP.js";const q={__name:"05Operators.md__slidev_30",setup(b){const{$slidev:v,$nav:c,$clicksContext:t,$clicks:B,$page:C,$renderContext:x,$frontmatter:r}=h();return t.setup(),(y,e)=>{const a=o;return n(),p(f,m(u(l(g)(l(r),29))),{default:i(()=>[e[1]||(e[1]=s("h4",null,"从头创建新的操作符",-1)),e[2]||(e[2]=s("p",null,"它更复杂，但如果您必须编写一个不能由现有操作符组合而成的操作符（很少发生），您可以使用 Observable 构造函数从头开始编写一个操作符",-1)),e[3]||(e[3]=s("ol",null,[s("li",null,"订阅输入 Observable 时实现所有三个 Observer 函数 next() 、 error() 和 complete() 。"),s("li",null,"实现一个“终结”函数，在 Observable 完成时进行清理"),s("li",null,"从传递给 Observable 构造函数的函数返回该终结函数。")],-1)),k(a,d({},{ranges:[]}),{default:i(()=>e[0]||(e[0]=[s("pre",{class:"shiki shiki-themes vitesse-dark vitesse-light slidev-code",style:{"--shiki-dark":"#dbd7caee","--shiki-light":"#393a34","--shiki-dark-bg":"#121212","--shiki-light-bg":"#ffffff"}},[s("code",{class:"language-shell"},[s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#B8A965","--shiki-light":"#998418"}}," ."),s("span",{style:{"--shiki-dark":"#DBD7CAEE","--shiki-light":"#393A34"}},"\\"),s("span",{style:{"--shiki-dark":"#C98A7D","--shiki-light":"#B56959"}},"examples"),s("span",{style:{"--shiki-dark":"#DBD7CAEE","--shiki-light":"#393A34"}},"\\"),s("span",{style:{"--shiki-dark":"#C98A7D","--shiki-light":"#B56959"}},"010delay.ts")])])],-1)])),_:1},16),e[4]||(e[4]=s("blockquote",null,[s("p",null,"操作符本质上是返回一个全新Observable对象的函数")],-1))]),_:1},16)}}};export{q as default};
