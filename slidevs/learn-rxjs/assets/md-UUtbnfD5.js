import{o as n,c as r,k as a,e as l,q as o,s as i,B as e}from"./modules/vue-DbxlR5i2.js";import{I as p}from"./slidev/default-BvtlqFyG.js";import{u as P,f as c}from"./slidev/context-B0SpK287.js";import"./index-16D_NgiB.js";import"./modules/shiki-bCin5VMP.js";const B={__name:"03Observables.md__slidev_10",setup(d){const{$slidev:m,$nav:v,$clicksContext:u,$clicks:f,$page:h,$renderContext:_,$frontmatter:s}=P();return u.setup(),(x,t)=>(n(),r(p,o(i(e(c)(e(s),9))),{default:a(()=>t[0]||(t[0]=[l("h3",null,"Pull vs Push",-1),l("p",null,"Pull 和 Push 是两种不同的协议，描述了数据生产者如何与数据消费者进行通信。",-1),l("p",null,"Pull系统中，消费者决定何时从数据生产者接收数据。生产者本身并不知道数据何时会传递给消费者。 每个 JavaScript 函数都是一个 Pull 系统。该函数是数据的生产者，调用该函数的代码通过从其调用中“拉出”单个返回值来使用它。",-1),l("p",null,"ES2015 引入了生成器函数和迭代器 ( function* )，这是另一种类型的 Pull 系统。调用 iterator.next() 的代码是消费者，从迭代器（生产者）“拉”出多个值。",-1),l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"type"),l("th",null,"PRODUCER（生产者）"),l("th",null,"CONSUMER（消费者）")])]),l("tbody",null,[l("tr",null,[l("td",null,"Pull"),l("td",null,"Passive（被动：请求时生成数据）"),l("td",null,"Active（决定何时请求数据）")]),l("tr",null,[l("td",null,"Push"),l("td",null,"Active（主动：按照自己的节奏生成数据）"),l("td",null,"Passive（对接收到的数据做出反应）")])])],-1),l("p",null,"Push系统中，生产者决定何时向消费者发送数据。消费者不知道何时会收到该数据。",-1),l("p",null,"Promise 是当今 JavaScript 中最常见的 Push 系统类型。 Promise（生产者）将解析值传递给注册的回调（消费者），但与函数不同的是，Promise 负责精确确定该值何时“推送”到回调。",-1)])),_:1},16))}};export{B as default};
