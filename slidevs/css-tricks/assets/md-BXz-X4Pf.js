import{o,b as m,c as d,k as c,e as t,l as _,q as S,s as f,B as r}from"./modules/vue-Ba7U_aMa.js";import{u as n,f as C}from"./slidev/context-_iZsAegV.js";import{I as y}from"./slidev/default-D2HxYKwE.js";import"./index-Dgj8W5Xr.js";import"./modules/shiki-Bpdc4GVC.js";const x={class:"gradient-box5"},k={__name:"Demo005PropertyGradient",setup(s){return n(),(a,l)=>(o(),m("div",x))}},I={__name:"002Backgrounds.md__slidev_26",setup(s){const{$slidev:a,$nav:l,$clicksContext:p,$clicks:$,$page:v,$renderContext:B,$frontmatter:i}=n();return p.setup(),(g,e)=>{const u=k;return o(),d(y,S(f(r(C)(r(i),25))),{default:c(()=>[e[0]||(e[0]=t("h4",null,"使用 CSS @property 实现背景色渐变动画",-1)),e[1]||(e[1]=t("p",null,"CSS @property 其实就是灵活度更高的 CSS 自定义属性，我们也可以称其为 CSS Houdini 自定义属性。其中：",-1)),e[2]||(e[2]=t("ul",null,[t("li",null,"@property --property-name 中的 --property-name 就是自定义属性的名称，定义后可在 CSS 中通过 var(–property-name) 进行引用。"),t("li",null,"syntax：该自定义属性的语法规则，也可以理解为表示定义的自定义属性的类型。"),t("li",null,"inherits：是否允许继承。"),t("li",null,"initial-value：初始值。")],-1)),e[3]||(e[3]=t("p",null,"Demo 中，我们利用了 CSS Houdini 自定义属性，将原本定义在 background 的过渡效果嫁接到了 color 之上，而 CSS 是支持一个颜色变换到另外一个颜色的，这样，我们巧妙地实现了渐变背景色的过渡动画。",-1)),_(u)]),_:1},16)}}};export{I as default};
